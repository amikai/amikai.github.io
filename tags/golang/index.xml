<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on no code no pain</title><link>https://amikai.github.io/tags/golang/</link><description>Recent content in golang on no code no pain</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Tue, 07 Jul 2020 13:42:50 +0000</lastBuildDate><atom:link href="https://amikai.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang 78 語法篇 - method set</title><link>https://amikai.github.io/2020/07/07/golang78syntax2/</link><pubDate>Tue, 07 Jul 2020 13:42:50 +0000</pubDate><guid>https://amikai.github.io/2020/07/07/golang78syntax2/</guid><description>method set, interface, auto deference or reference 當這些語法綜合再一起使用時，很容易混淆，甚至寫出 bug code，這章我們就透過題目探討一下 method set 常常被大家誤會的地方。
Golang 78 語法篇 - interface % Line 50 用到的概念就在這篇。
題目 請問以下程式輸出結果為何
type Employee struct {} func (e Employee) DoWork() { fmt.Println(&amp;#34;do work&amp;#34;) } func main() { (&amp;amp;Employee{}).DoWork() } 答案只有兩種方向: 1. 無法編譯 2. 印出 do work
這個程式可以編譯，並且還印出 do work 但是為什麼呢？
Method set 在 receiver argument 和 receiver parameter 不一樣的情況下，直覺反應就是 implicit dereference 和 implicit reference 在背後會幫忙，但是這個寫法 (struct literal) 是不會有此情況的。</description></item><item><title>Golang 78 語法篇 - interface</title><link>https://amikai.github.io/2020/07/03/golang78syntax/</link><pubDate>Fri, 03 Jul 2020 10:59:36 +0000</pubDate><guid>https://amikai.github.io/2020/07/03/golang78syntax/</guid><description>Interface 可以說是 golang 的精髓之一。golang interface 特殊的語法以及概念也是工程師常常犯錯的地方。此題只是用來釐清自己的概念。
題目 請問以下程式輸出結果為何
package main import &amp;#34;fmt&amp;#34; type S struct{ val int } func (s S) F() {} type IF interface { F() } func InitType() S { var s S return s } func InitPointer() *S { var s *S return s } func InitEfaceType() interface{} { var s S return s } func InitEfacePointer() interface{} { var s *S return s } func InitIfaceType() IF { var s S return s } func InitIfacePointer() IF { var s *S return s } func main() { // fmt.</description></item></channel></rss>