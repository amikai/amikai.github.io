<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c on no code no pain</title><link>https://amikai.github.io/tags/c/</link><description>Recent content in c on no code no pain</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Sat, 28 Nov 2020 21:50:57 +0000</lastBuildDate><atom:link href="https://amikai.github.io/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>在 (neo)vim 裡 C 語言程式碼導覽技巧</title><link>https://amikai.github.io/2020/11/28/vim-c-env-move/</link><pubDate>Sat, 28 Nov 2020 21:50:57 +0000</pubDate><guid>https://amikai.github.io/2020/11/28/vim-c-env-move/</guid><description>現代的專案開發，很少在從無到有打造，大部分都是基於現有的程式之上繼續開發或維護，進入專案之後，通常第一件事就是大量閱讀程式碼理清專案的整個脈絡，才開始著手寫 code，所以好的程式碼導覽技巧將會帶你上天堂。
我將大部分的程式碼導覽情境大致拆成了三種情況：
基本的跳轉： #if #endif 中間的程式碼太長，想要跳轉到成對的 #if #endif cursor 在 {&amp;hellip;} block 裡， 這個 block 又臭又長，想快速跳轉 block 的開頭和結尾 註解長篇大論，想快速跳到註解的開頭或結尾 尋找專案下檔案 (可透過設定 path option 解決) 跳轉到標頭檔 跳轉到指定檔案 使用 source code tagging system 快速挑轉到 function 定義及特定 symbol 等等： 專案相當大的時候，source code tagging system 相當好用，可以快速找到定位，也不會花掉太多的資源，比起 LSP 的跳轉定義，是較輕量的選擇。 本篇依據上述三種情境，一一講述。
常用跳轉操作 %
跳到成對的括號 如果註解是 /*...*/，跳到成對的註解符號 在成對的 #if, #ifdef, #else, #elif, #endif 之中跳轉，這相當重要，如果 code 很長, if else macro 又是巢狀的，這招可以讓你少迷路好幾次 [{ ]}</description></item></channel></rss>