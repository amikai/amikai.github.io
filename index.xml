<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>amikai's blog</title><link>https://amikai.github.io/</link><description>Recent content on amikai's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Mon, 16 Aug 2021 15:20:34 +0800</lastBuildDate><atom:link href="https://amikai.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang 開發環境 - 使用 neovim 0.5</title><link>https://amikai.github.io/2021/08/16/go_neovim_env_0.5/</link><pubDate>Mon, 16 Aug 2021 15:20:34 +0800</pubDate><guid>https://amikai.github.io/2021/08/16/go_neovim_env_0.5/</guid><description>Neovim 簡介 neovim 從 vim 專案 fork 之後，新增了 async 功能，所有工作不會再被單一線程給擋住 (在過去 linter 檢查時，是無法寫程式碼的)，大大提升了可用性和使用者體驗，朝現</description></item><item><title>好用的 vim virtualedit 選項</title><link>https://amikai.github.io/2021/05/23/vim-virtualedit/</link><pubDate>Sun, 23 May 2021 05:51:41 +0000</pubDate><guid>https://amikai.github.io/2021/05/23/vim-virtualedit/</guid><description>使用 ctrl+v 把一個圖片中的英文字母區塊刪掉會像以下這樣 顯然是不如預期 set virtualedit=block 設定了此選項之後 什麼是 virutaledit 在 vim 裡預設行為：游標無法放在沒有字元的地方，也就是</description></item><item><title>Dockerfile - Multi-stage build 筆記</title><link>https://amikai.github.io/2021/03/01/docker-multi-stage-build/</link><pubDate>Mon, 01 Mar 2021 21:57:33 +0000</pubDate><guid>https://amikai.github.io/2021/03/01/docker-multi-stage-build/</guid><description>在專案開發時，通常會執行代碼檢查、單元測試、編譯、執行等等。 在 docker 還沒出現之前，這些流程都是在本機上跑 (版本 0)，因為環境的不一致可能導致不同</description></item><item><title>在 (neo)vim 裡 C 語言程式碼導覽技巧</title><link>https://amikai.github.io/2020/11/28/vim-c-env-move/</link><pubDate>Sat, 28 Nov 2020 21:50:57 +0000</pubDate><guid>https://amikai.github.io/2020/11/28/vim-c-env-move/</guid><description>現代的專案開發，很少在從無到有打造，大部分都是基於現有的程式之上繼續開發或維護，進入專案之後，通常第一件事就是大量閱讀程式碼理清專案的整個脈</description></item><item><title>聊聊你在 vim 常用的移動方式</title><link>https://amikai.github.io/2020/10/03/vim-commonly-used-motion/</link><pubDate>Sat, 03 Oct 2020 10:53:36 +0000</pubDate><guid>https://amikai.github.io/2020/10/03/vim-commonly-used-motion/</guid><description>看下圖，如果想將 &amp;lt;expr&amp;gt; 改成 &amp;lt;leader&amp;gt; 你會怎麼做呢? 通常我看過的幾種方式如下： 使用 j 向下到 97 行，在使用 l 到 target 並且開始編輯，這也是最糟的 target 的行數看起來離 window 中</description></item><item><title>vim 高亮 yank 區域</title><link>https://amikai.github.io/2020/09/29/vim-tips-highlight-yank-region/</link><pubDate>Tue, 29 Sep 2020 21:09:01 +0000</pubDate><guid>https://amikai.github.io/2020/09/29/vim-tips-highlight-yank-region/</guid><description>y 是在 vim 裡最常使用的使用的 operator 之一，使用 y operator 將會執行 yank 動作，但它無法像 c (change) 和 d (delete) operator 使用之後馬上就知道對文件編輯了什麼。yank 動作是沒有反饋的</description></item><item><title>你應該擴充的 text object</title><link>https://amikai.github.io/2020/09/22/vim-text-object/</link><pubDate>Tue, 22 Sep 2020 19:03:52 +0000</pubDate><guid>https://amikai.github.io/2020/09/22/vim-text-object/</guid><description>vim 高效率編輯的背後，operator, motion, text object 的配合功不可沒。 operator 是編輯的動作， text object 就是文字區塊，motion 是跳轉到文件點，透過三者的按鍵配合</description></item><item><title>誰說不能在 vim 裡編譯，從 :make 到 :Make</title><link>https://amikai.github.io/2020/09/10/vim-make/</link><pubDate>Thu, 10 Sep 2020 00:21:31 +0000</pubDate><guid>https://amikai.github.io/2020/09/10/vim-make/</guid><description>前言 回想一下，上一次使用 vim 寫程式要編譯時，你是怎麼做的 大多人數會將 terminal 切成兩塊，一塊是 vim，一塊是 bash 用來編譯 (如下圖)，編譯有錯誤，則移動到</description></item><item><title>聊聊 vim mark 使用情境 - code 參照</title><link>https://amikai.github.io/2020/09/07/vim-mark-tips/</link><pubDate>Mon, 07 Sep 2020 15:03:01 +0000</pubDate><guid>https://amikai.github.io/2020/09/07/vim-mark-tips/</guid><description>寫程式的時候常常遇到一種情況，假設你是團隊的新人，需要常常參照別人的程式，看看團隊的 coding style 等等，可能需要參照 A file 的第 10 行，B file 第 8 行，C file 第 999</description></item><item><title>Golang 開發環境 - 使用 neovim</title><link>https://amikai.github.io/2020/09/03/go_neovim_env/</link><pubDate>Thu, 03 Sep 2020 10:48:54 +0000</pubDate><guid>https://amikai.github.io/2020/09/03/go_neovim_env/</guid><description>本篇設定部分已經過時，請看 Golang 開發環境 - 使用 neovim 0.5 你確定要用 neovim 開發 golang? 現在是 vscode 稱霸天下的時代，理所當然的 (neo)vim 也常常被拿來 vscode 比較，vscode 內建整合</description></item><item><title>Golang 78 語法篇 - method set</title><link>https://amikai.github.io/2020/07/07/golang78syntax2/</link><pubDate>Tue, 07 Jul 2020 13:42:50 +0000</pubDate><guid>https://amikai.github.io/2020/07/07/golang78syntax2/</guid><description>method set, interface, auto deference or reference 當這些語法綜合再一起使用時，很容易混淆，甚至寫出 bug code，這章我們就透過題目探討一下 method set 常常被大家誤會的地方。 Golang 78 語法篇 - interface</description></item><item><title>Golang 78 語法篇 - interface</title><link>https://amikai.github.io/2020/07/03/golang78syntax/</link><pubDate>Fri, 03 Jul 2020 10:59:36 +0000</pubDate><guid>https://amikai.github.io/2020/07/03/golang78syntax/</guid><description>Interface 可以說是 golang 的精髓之一。golang interface 特殊的語法以及概念也是工程師常常犯錯的地方。此題只是用來釐清自己的概念。 題目 請問以下程式輸出結果為何 1</description></item><item><title>Hello 世界</title><link>https://amikai.github.io/2000/07/22/hello-world/</link><pubDate>Sat, 22 Jul 2000 15:16:51 +0800</pubDate><guid>https://amikai.github.io/2000/07/22/hello-world/</guid><description>Hello 世界</description></item><item><title>Archive</title><link>https://amikai.github.io/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://amikai.github.io/archives/</guid><description>archives</description></item></channel></rss>