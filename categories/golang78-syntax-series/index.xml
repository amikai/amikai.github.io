<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang78 syntax series on amikai's blog</title><link>https://amikai.github.io/categories/golang78-syntax-series/</link><description>Recent content in golang78 syntax series on amikai's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Tue, 07 Jul 2020 13:42:50 +0000</lastBuildDate><atom:link href="https://amikai.github.io/categories/golang78-syntax-series/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang 78 語法篇 - method set</title><link>https://amikai.github.io/2020/07/07/golang78syntax2/</link><pubDate>Tue, 07 Jul 2020 13:42:50 +0000</pubDate><guid>https://amikai.github.io/2020/07/07/golang78syntax2/</guid><description>method set, interface, auto deference or reference 當這些語法綜合再一起使用時，很容易混淆，甚至寫出 bug code，這章我們就透過題目探討一下 method set 常常被大家誤會的地方。 Golang 78 語法篇 - interface</description></item><item><title>Golang 78 語法篇 - interface</title><link>https://amikai.github.io/2020/07/03/golang78syntax/</link><pubDate>Fri, 03 Jul 2020 10:59:36 +0000</pubDate><guid>https://amikai.github.io/2020/07/03/golang78syntax/</guid><description>Interface 可以說是 golang 的精髓之一。golang interface 特殊的語法以及概念也是工程師常常犯錯的地方。此題只是用來釐清自己的概念。 題目 請問以下程式輸出結果為何 1</description></item></channel></rss>